<다양한 form library>
https://beomy.github.io/tech/react/form-libraries/


종속성이 높은 경우에는 다음과 같은 문제가 발생할 수 있습니다:

유지보수의 어려움
-> 변경이나 수정이 필요할 때 다른 부분에 미치는 영향을 파악하기 어려울 수 있습니다. 이는 코드의 복잡성을 증가시키고 유지보수를 어렵게 만들 수 있습니다.
테스트의 어려움
-> 테스트하기 어려울 수 있습니다. 특히 다른 요소에 의존하는 경우 해당 요소를 테스트하기 위해 추가적인 설정이 필요할 수 있습니다.
재사용성 감소
-> 종속성이 높은 코드는 다른 컨텍스트에서 재사용하기 어렵습니다. 종속성이 낮은 코드일수록 다른 곳에서 쉽게 재사용할 수 있습니다.

따라서 종속성을 최대한 줄이고 각 요소가 독립적으로 동작할 수 있도록 설계하는 것이 좋습니다. 
이를 통해 코드의 유연성과 재사용성을 높일 수 있습니다.
종속성을 최소화하기 위해 SOLID 원칙 등의 설계 원칙을 따르는 것이 도움이 됩니다.


다음에는 formik을 사용해봐도 괜찮을지도!!


controller사용

useController를 사용할 때는 error나 invalid 속성을 직접 넣어줄 필요가 없습니다. 
useForm의 formState 객체에서 에러와 유효성 상태를 관리하므로, 
이러한 상태를 직접적으로 컨트롤러에 전달할 필요가 없습니다. 
대신 컨트롤러를 사용하여 각 인풋 필드를 제어하고, 
useForm의 handleSubmit 메서드를 사용하여 폼 제출을 처리할 수 있습니다. 
이렇게 하면 useForm이 formState를 관리하고 
컨트롤러가 각 필드를 제어하므로 코드가 더 간결해집니다.


field 객체는 다음과 같은 속성을 포함할 수 있습니다:

value: 입력 요소의 현재 값
onChange: 입력 요소의 값이 변경될 때 호출되는 콜백 함수
onBlur: 입력 요소가 포커스를 잃었을 때 호출되는 콜백 함수
name: 입력 요소의 이름 (React Hook Form의 등록된 이름)
ref: 입력 요소의 참조 (React Hook Form에 의해 내부적으로 관리됨)
disabled: 입력 요소의 활성화 상태를 나타내는 불리언 값